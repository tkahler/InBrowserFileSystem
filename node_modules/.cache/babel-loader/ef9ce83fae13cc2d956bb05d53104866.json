{"ast":null,"code":"import _possibleConstructorReturn from \"/home/tod/Documents/resumePojects/file-system/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tod/Documents/resumePojects/file-system/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tod/Documents/resumePojects/file-system/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/tod/Documents/resumePojects/file-system/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"/home/tod/Documents/resumePojects/file-system/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/tod/Documents/resumePojects/file-system/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/tod/Documents/resumePojects/file-system/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/index.css';\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\"; //the item (folder and files) information of all items in file system is stored in a tree,\n// where data is always pointing to the node of the current directory\n\nvar ItemNode = function ItemNode(path, type, children) {\n  _classCallCheck(this, ItemNode);\n\n  this.name = path;\n  this.type = type;\n  this.children = children;\n};\n\nvar ItemTree =\n/*#__PURE__*/\nfunction () {\n  function ItemTree() {\n    _classCallCheck(this, ItemTree);\n\n    var root = new ItemNode('root', 'Folder', []);\n    this.allItems = {\n      'rootFolder': root\n    };\n  }\n\n  _createClass(ItemTree, [{\n    key: \"loadTree\",\n    value: function loadTree(allItems) {\n      this.allItems = allItems;\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem(path, type) {\n      var parent = path.substring(0, path.lastIndexOf('/'));\n      var children = this.allItems[parent + 'Folder'].children;\n\n      if (children.indexOf(path + type) <= -1) {\n        children.push(path + type);\n        var newItem = new ItemNode(path, type, []);\n        this.allItems[path + type] = newItem;\n        return this._getAllChildNodes(children);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"getDirectoryChildren\",\n    value: function getDirectoryChildren(path) {\n      return this._getAllChildNodes(this.allItems[path + 'Folder'].children);\n    }\n  }, {\n    key: \"deleteItem\",\n    value: function deleteItem(path, type) {\n      //remove from all items\n      delete this.allItems[path + type]; //--------------------------delete all decendents of file aswell\n      //remove from parents children\n\n      console.log(path);\n      var parent = path.substring(0, path.lastIndexOf('/'));\n      var children = this.allItems[parent + type].children;\n      var childIndex = children.indexOf(path + type);\n      children.splice(childIndex, 1);\n      return this._getAllChildNodes(children);\n    }\n  }, {\n    key: \"renameItem\",\n    value: function renameItem(path, newPath, type) {\n      var parent = path.substring(0, path.lastIndexOf('/'));\n      var children = this.allItems[parent + 'Folder'].children; //if not already in child\n\n      if (children.indexOf(newPath + type) <= -1) {\n        var childIndex = children.indexOf(path + type);\n        children[childIndex] = newPath + type;\n        var id = newPath + type; //rename key\n\n        this.allItems[id] = this.allItems[path + type];\n        this.allItems[id].name = newPath;\n        delete this.allItems[path];\n        return this._getAllChildNodes(children);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_getAllChildNodes\",\n    value: function _getAllChildNodes(ids) {\n      var _this = this;\n\n      return ids.map(function (id) {\n        return _this.allItems[id];\n      });\n    }\n  }]);\n\n  return ItemTree;\n}(); //localStorage.clear(); //uncomment to clear localstorage\n\n\nvar data; //if data not set make new root directory else load root directory\n\nif (localStorage.getItem('Data') === null) {\n  //item node of current directory\n  data = new ItemTree();\n} else {\n  data = new ItemTree();\n  var allItems = JSON.parse(localStorage.getItem(\"Data\"));\n  data.loadTree(allItems);\n} // Renders the add folder/file buttons, the back button, and dynamically renders\n// the current directory to be displayed\n\n\nvar FileManager =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FileManager, _React$Component);\n\n  //initialize current directory to root with no children\n  function FileManager(props) {\n    var _this2;\n\n    _classCallCheck(this, FileManager);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(FileManager).call(this, props)); //state always updated to reflect current directory to display\n\n    _this2.state = {\n      children: data.getDirectoryChildren('root').concat(),\n      path: 'root'\n    };\n    _this2.handleAddItem = _this2.handleAddItem.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.renderFolders = _this2.renderFolders.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.handleItemClick = _this2.handleItemClick.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.handleParentClick = _this2.handleParentClick.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.handleItemDelete = _this2.handleItemDelete.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.handleRename = _this2.handleRename.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    return _this2;\n  } //add new item to data, update state to display new item\n\n\n  _createClass(FileManager, [{\n    key: \"handleAddItem\",\n    value: function handleAddItem(name, type) {\n      var path = this.state.path + '/' + name;\n      var children = data.addItem(path, type, []);\n\n      if (children) {\n        this.setState({\n          children: children.concat()\n        });\n      } else {\n        alert(\"A \" + type + \" with this name already exists!\");\n      }\n    } //if folder is clicked update state to display new directory\n\n  }, {\n    key: \"handleItemClick\",\n    value: function handleItemClick(path, type) {\n      if (type === 'Folder') {\n        console.log(path);\n        var children = data.getDirectoryChildren(path).concat();\n        this.setState({\n          children: children,\n          path: path\n        });\n      } else {//if file clicked type do stuff here\n      }\n    } //if the back button is pressed, update state to display parent directory\n\n  }, {\n    key: \"handleParentClick\",\n    value: function handleParentClick() {\n      if (this.state.path !== 'root') {\n        var parentPath = this.state.path.slice();\n        parentPath = parentPath.substring(0, parentPath.lastIndexOf('/'));\n        var children = data.getDirectoryChildren(parentPath);\n        this.setState({\n          children: children.concat(),\n          path: parentPath\n        });\n      }\n    } //delete the passed item from data, update state to display deletion\n\n  }, {\n    key: \"handleItemDelete\",\n    value: function handleItemDelete(path, type) {\n      var children = data.deleteItem(path, type);\n      this.setState({\n        children: children.concat()\n      });\n    } //find file in data and rename it, update state\n\n  }, {\n    key: \"handleRename\",\n    value: function handleRename(path, newName, type) {\n      var newPath = this.state.path + '/' + newName;\n      var children = data.renameItem(path, newPath, type);\n\n      if (children) {\n        this.setState({\n          children: children.concat()\n        });\n      } else {\n        alert(\"A \" + type + \" with this name already exists\");\n      }\n    } //using the children current state render the file components\n\n  }, {\n    key: \"renderFolders\",\n    value: function renderFolders() {\n      var _this3 = this;\n\n      localStorage.setItem('Data', JSON.stringify(data.allItems));\n      var items = this.state.children.concat();\n      items.sort(function (a, b) {\n        return a.type < b.type;\n      });\n      return items.map(function (item) {\n        return React.createElement(Item, {\n          type: item.type,\n          key: item.name + item.type,\n          name: item.name,\n          onClick: _this3.handleItemClick,\n          onDeleteClick: _this3.handleItemDelete,\n          onRenameClick: _this3.handleRename,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(AddItemButton, {\n        type: \"Folder\",\n        onClick: this.handleAddItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(AddItemButton, {\n        type: \"File\",\n        onClick: this.handleAddItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(ParentFolderButton, {\n        onClick: function onClick() {\n          return _this4.handleParentClick();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, this.state.path)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, this.renderFolders()));\n    }\n  }]);\n\n  return FileManager;\n}(React.Component); //An item component displays a single clickable item (folder or file)\n\n\nvar Item =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Item, _React$Component2);\n\n  function Item(props) {\n    var _this5;\n\n    _classCallCheck(this, Item);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this, props));\n    _this5.state = {\n      renaming: false,\n      name: _this5.props.name,\n      type: _this5.props.type\n    };\n    _this5.handleMenuRename = _this5.handleMenuRename.bind(_assertThisInitialized(_assertThisInitialized(_this5)));\n    _this5.handleCloseModal = _this5.handleCloseModal.bind(_assertThisInitialized(_assertThisInitialized(_this5)));\n    _this5.handleRename = _this5.handleRename.bind(_assertThisInitialized(_assertThisInitialized(_this5)));\n    return _this5;\n  } //if file is right clicked allow the NameItemModal to be displayed\n\n\n  _createClass(Item, [{\n    key: \"handleMenuRename\",\n    value: function handleMenuRename() {\n      this.setState({\n        renaming: true\n      });\n    } //if NameItemModal is closed, stop displaying it\n\n  }, {\n    key: \"handleCloseModal\",\n    value: function handleCloseModal() {\n      this.setState({\n        renaming: false\n      });\n    } //calls method in FileManager to change the state of children\n\n  }, {\n    key: \"handleRename\",\n    value: function handleRename(newName) {\n      this.props.onRenameClick(this.state.name, newName, this.state.type);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var srcImage;\n\n      if (this.props.type === 'Folder') {\n        srcImage = \"https://cdn4.iconfinder.com/data/icons/small-n-flat/24/folder-blue-128.png\";\n      } else {\n        srcImage = \"https://static.thenounproject.com/png/47347-200.png\";\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(ContextMenuTrigger, {\n        id: this.state.name + this.state.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"files\",\n        onClick: function onClick() {\n          return _this6.props.onClick(_this6.state.name, _this6.state.type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: srcImage,\n        alt: this.state.type + \" Icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }), this.props.name))), React.createElement(ContextMenu, {\n        id: this.state.name + this.state.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        onClick: this.handleMenuRename,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, \"Rename\"), React.createElement(MenuItem, {\n        onClick: function onClick() {\n          return _this6.props.onDeleteClick(_this6.state.name, _this6.state.type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"Delete\")), this.state.renaming ? React.createElement(NameItemModal, {\n        onClick: this.handleRename,\n        closeModal: this.handleCloseModal,\n        submitName: \"Rename \" + this.state.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }) : null);\n    }\n  }]);\n\n  return Item;\n}(React.Component); //AddItemButton is a single button that is used to open the NameItemModal\n\n\nvar AddItemButton =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(AddItemButton, _React$Component3);\n\n  function AddItemButton(props) {\n    var _this7;\n\n    _classCallCheck(this, AddItemButton);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(AddItemButton).call(this, props));\n    _this7.state = {\n      displayModal: false\n    };\n    _this7.onClick = _this7.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this7)));\n    _this7.handleCloseModal = _this7.handleCloseModal.bind(_assertThisInitialized(_assertThisInitialized(_this7)));\n    return _this7;\n  } //when add item button clicked name file modal is displayed\n\n\n  _createClass(AddItemButton, [{\n    key: \"onClick\",\n    value: function onClick() {\n      this.setState({\n        displayModal: true\n      });\n    }\n  }, {\n    key: \"handleCloseModal\",\n    value: function handleCloseModal() {\n      this.setState({\n        displayModal: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var type = this.props.type;\n      return React.createElement(\"div\", {\n        className: \"menuButtonsCont\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"addFolderButton\",\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, \"Add \", type), this.state.displayModal ? React.createElement(NameItemModal, {\n        type: this.props.type,\n        closeModal: this.handleCloseModal,\n        onClick: this.props.onClick,\n        submitName: \"Add \" + type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }) : null);\n    }\n  }]);\n\n  return AddItemButton;\n}(React.Component); //NameItemModal allows user to enter a file name into a text box and submit\n//used for adding new items and renaming current ones\n\n\nvar NameItemModal =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(NameItemModal, _React$Component4);\n\n  function NameItemModal(props) {\n    var _this8;\n\n    _classCallCheck(this, NameItemModal);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(NameItemModal).call(this, props));\n    _this8.state = {\n      submitValue: \"\"\n    };\n    _this8.handleSpanClick = _this8.handleSpanClick.bind(_assertThisInitialized(_assertThisInitialized(_this8)));\n    _this8.handleSubmit = _this8.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this8)));\n    _this8.handleChange = _this8.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this8)));\n    return _this8;\n  }\n\n  _createClass(NameItemModal, [{\n    key: \"handleSpanClick\",\n    value: function handleSpanClick() {\n      this.props.closeModal();\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      this.handleSpanClick();\n      this.props.onClick(this.state.submitValue, this.props.type);\n      e.preventDefault();\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      this.setState({\n        submitValue: e.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var modal = React.createElement(\"div\", {\n        id: \"myModal\",\n        className: \"modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"close\",\n        onClick: this.handleSpanClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, \"\\xD7\"), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, this.props.type, \" Name:\", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.submitValue,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"submitButton\",\n        type: \"submit\",\n        value: this.props.submitName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }))));\n      var modalRoot = document.getElementById('last');\n      return ReactDOM.createPortal(modal, modalRoot);\n    }\n  }]);\n\n  return NameItemModal;\n}(React.Component); //A single button used to display the parent directory\n\n\nvar ParentFolderButton =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(ParentFolderButton, _React$Component5);\n\n  function ParentFolderButton() {\n    _classCallCheck(this, ParentFolderButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ParentFolderButton).apply(this, arguments));\n  }\n\n  _createClass(ParentFolderButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this9 = this;\n\n      return React.createElement(\"div\", {\n        className: \"menuButtonsCont\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"backButton\",\n        onClick: function onClick() {\n          return _this9.props.onClick();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, \"Go Back\"));\n    }\n  }]);\n\n  return ParentFolderButton;\n}(React.Component);\n\nReactDOM.render(React.createElement(FileManager, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 389\n  },\n  __self: this\n}), document.getElementById('app'));","map":{"version":3,"sources":["/home/tod/Documents/resumePojects/file-system/src/index.js"],"names":["React","ReactDOM","ContextMenu","MenuItem","ContextMenuTrigger","ItemNode","path","type","children","name","ItemTree","root","allItems","parent","substring","lastIndexOf","indexOf","push","newItem","_getAllChildNodes","console","log","childIndex","splice","newPath","id","ids","map","data","localStorage","getItem","JSON","parse","loadTree","FileManager","props","state","getDirectoryChildren","concat","handleAddItem","bind","renderFolders","handleItemClick","handleParentClick","handleItemDelete","handleRename","addItem","setState","alert","parentPath","slice","deleteItem","newName","renameItem","setItem","stringify","items","sort","a","b","item","Component","Item","renaming","handleMenuRename","handleCloseModal","onRenameClick","srcImage","onClick","onDeleteClick","AddItemButton","displayModal","NameItemModal","submitValue","handleSpanClick","handleSubmit","handleChange","closeModal","e","preventDefault","target","value","modal","submitName","modalRoot","document","getElementById","createPortal","ParentFolderButton","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/index.css';\n\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n\n\n//the item (folder and files) information of all items in file system is stored in a tree,\n// where data is always pointing to the node of the current directory\n\n\nclass ItemNode  {\n    constructor(path, type, children) {\n        this.name = path;\n        this.type = type;\n        this.children = children;\n    }\n\n}\n\nclass ItemTree {\n    constructor() {\n        let root = new ItemNode('root','Folder', []);\n        this.allItems = {'rootFolder' : root};\n    }\n\n    loadTree(allItems) {\n        this.allItems = allItems;\n    }\n\n    addItem(path, type) {\n        let parent = path.substring(0, path.lastIndexOf('/'));\n        let children = this.allItems[parent+'Folder'].children;\n        if(children.indexOf(path+type) <= -1) {\n            children.push(path+type);\n\n            let newItem = new ItemNode(path, type, []);\n            this.allItems[path+type] = newItem;\n\n\n            return this._getAllChildNodes(children);\n\n        } else {\n            return null;\n        }\n\n    }\n\n    getDirectoryChildren(path) {\n        return this._getAllChildNodes(this.allItems[path+'Folder'].children);\n    }\n\n\n    deleteItem(path, type) {\n        //remove from all items\n        delete this.allItems[path+type];\n        //--------------------------delete all decendents of file aswell\n\n        //remove from parents children\n        console.log(path);\n        let parent = path.substring(0, path.lastIndexOf('/'));\n        let children = this.allItems[parent+type].children;\n        let childIndex = children.indexOf(path+type);\n        children.splice(childIndex, 1);\n        return this._getAllChildNodes(children);\n    }\n\n    renameItem(path, newPath, type) {\n        let parent = path.substring(0, path.lastIndexOf('/'));\n        let children = this.allItems[parent+'Folder'].children;\n\n        //if not already in child\n        if(children.indexOf(newPath+type) <= -1) {\n            let childIndex = children.indexOf(path+type);\n            children[childIndex]= newPath + type;\n\n            let id = newPath + type;\n            //rename key\n            this.allItems[id] = this.allItems[path+type];\n            this.allItems[id].name = newPath;\n            delete this.allItems[path];\n\n            return this._getAllChildNodes(children);\n\n        } else {\n            return null;\n        }\n\n    }\n\n    _getAllChildNodes(ids) {\n        return ids.map(id => {return this.allItems[id]});\n    }\n\n}\n\n//localStorage.clear(); //uncomment to clear localstorage\nlet data;\n//if data not set make new root directory else load root directory\nif (localStorage.getItem('Data') === null) {\n    //item node of current directory\n    data = new ItemTree();\n} else {\n    data = new ItemTree();\n    let allItems = JSON.parse(localStorage.getItem(\"Data\"));\n    data.loadTree(allItems);\n}\n\n\n// Renders the add folder/file buttons, the back button, and dynamically renders\n// the current directory to be displayed\nclass FileManager extends React.Component {\n    //initialize current directory to root with no children\n    constructor(props) {\n        super(props);\n        //state always updated to reflect current directory to display\n        this.state = {\n            children: data.getDirectoryChildren('root').concat(),\n            path: 'root',\n\n        };\n\n        this.handleAddItem = this.handleAddItem.bind(this);\n        this.renderFolders = this.renderFolders.bind(this);\n        this.handleItemClick = this.handleItemClick.bind(this);\n        this.handleParentClick = this.handleParentClick.bind(this);\n        this.handleItemDelete = this.handleItemDelete.bind(this);\n        this.handleRename = this.handleRename.bind(this);\n    }\n\n    //add new item to data, update state to display new item\n    handleAddItem(name, type) {\n        let path = this.state.path + '/' + name;\n        let children = data.addItem(path, type, []);\n        if (children) {\n            this.setState({\n                children: children.concat()\n            });\n        } else {\n            alert(\"A \" + type + \" with this name already exists!\");\n        }\n    }\n\n    //if folder is clicked update state to display new directory\n    handleItemClick(path, type) {\n        if(type === 'Folder') {\n            console.log(path);\n            let children = data.getDirectoryChildren(path).concat();\n\n            this.setState({\n                children: children,\n                path: path,\n            });\n        } else {\n            //if file clicked type do stuff here\n        }\n    }\n\n    //if the back button is pressed, update state to display parent directory\n    handleParentClick() {\n        if (this.state.path !== 'root') {\n            let parentPath = this.state.path.slice();\n            parentPath = parentPath.substring(0, parentPath.lastIndexOf('/'));\n\n            let children = data.getDirectoryChildren(parentPath);\n\n            this.setState({\n                children: children.concat(),\n                path: parentPath,\n            });\n        }\n\n    }\n\n\n    //delete the passed item from data, update state to display deletion\n    handleItemDelete(path, type) {\n        let children = data.deleteItem(path, type);\n        this.setState({children: children.concat()});\n    }\n\n    //find file in data and rename it, update state\n    handleRename(path, newName, type) {\n        let newPath = this.state.path + '/' + newName;\n        let children = data.renameItem(path, newPath, type);\n        if(children) {this.setState({children: children.concat()});\n        } else {\n            alert(\"A \" + type + \" with this name already exists\");\n        }\n    }\n\n    //using the children current state render the file components\n    renderFolders() {\n        localStorage.setItem('Data',JSON.stringify(data.allItems));\n        let items = this.state.children.concat();\n        items.sort((a,b) => a.type < b.type);\n        return items.map((item) => <Item type={item.type} key={item.name + item.type} name={item.name}\n                                                        onClick ={this.handleItemClick}\n                                                        onDeleteClick ={this.handleItemDelete} onRenameClick={this.handleRename}/>);\n\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <AddItemButton type=\"Folder\" onClick={this.handleAddItem}/>\n                    <AddItemButton type=\"File\" onClick={this.handleAddItem}/>\n                    <ParentFolderButton onClick={() => this.handleParentClick()}/>\n                </div>\n\n                <div>\n                    <h3>{this.state.path}</h3>\n                </div>\n                <div>\n                    {this.renderFolders()}\n                </div>\n            </div>\n        );\n    }\n}\n\n\n//An item component displays a single clickable item (folder or file)\nclass Item extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            renaming: false,\n            name: this.props.name,\n            type: this.props.type,\n        };\n        this.handleMenuRename = this.handleMenuRename.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.handleRename = this.handleRename.bind(this);\n\n    }\n\n    //if file is right clicked allow the NameItemModal to be displayed\n    handleMenuRename() {\n        this.setState({renaming: true});\n    }\n\n    //if NameItemModal is closed, stop displaying it\n    handleCloseModal() {\n        this.setState({renaming: false});\n    }\n\n    //calls method in FileManager to change the state of children\n    handleRename(newName) {\n        this.props.onRenameClick(this.state.name, newName, this.state.type);\n    }\n\n    render() {\n        let srcImage;\n        if(this.props.type === 'Folder') {\n            srcImage = \"https://cdn4.iconfinder.com/data/icons/small-n-flat/24/folder-blue-128.png\";\n        } else {\n            srcImage = \"https://static.thenounproject.com/png/47347-200.png\";\n        }\n\n        return (\n            <div>\n                <ContextMenuTrigger id={this.state.name + this.state.type}>\n                    <div className='files' onClick={() => this.props.onClick(this.state.name, this.state.type)}>\n                        <p>\n                        <img src={srcImage} alt={this.state.type + \" Icon\"}/>\n                        {this.props.name}</p>\n                    </div>\n                </ContextMenuTrigger>\n\n                <ContextMenu id={this.state.name + this.state.type}>\n                    <MenuItem onClick={this.handleMenuRename}>\n                        Rename\n                    </MenuItem>\n                    <MenuItem onClick={() => this.props.onDeleteClick(this.state.name, this.state.type)}>\n                        Delete\n                    </MenuItem>\n                </ContextMenu>\n\n                {this.state.renaming ? <NameItemModal onClick= {this.handleRename}\n                                                      closeModal = {this.handleCloseModal}\n                                                      submitName = {\"Rename \" + this.state.type}/> : null}\n            </div>\n        );\n    }\n}\n\n\n//AddItemButton is a single button that is used to open the NameItemModal\nclass AddItemButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            displayModal: false\n        };\n        this.onClick = this.onClick.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n    }\n\n    //when add item button clicked name file modal is displayed\n    onClick() {\n        this.setState({displayModal: true});\n    }\n\n    handleCloseModal() {\n        this.setState({displayModal: false});\n    }\n\n    render() {\n        let type = this.props.type;\n\n        return (\n            <div className='menuButtonsCont'>\n                <button id=\"addFolderButton\" onClick={this.onClick}>\n                    Add {type}\n                </button>\n                {this.state.displayModal ? <NameItemModal type={this.props.type} closeModal={this.handleCloseModal}\n                                                          onClick={this.props.onClick} submitName ={\"Add \" + type}/>: null}\n            </div>\n        );\n\n    }\n}\n\n\n//NameItemModal allows user to enter a file name into a text box and submit\n//used for adding new items and renaming current ones\nclass NameItemModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            submitValue: \"\",\n        };\n        this.handleSpanClick = this.handleSpanClick.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleSpanClick() {\n        this.props.closeModal();\n    }\n\n    handleSubmit(e) {\n        this.handleSpanClick();\n        this.props.onClick(this.state.submitValue, this.props.type);\n        e.preventDefault();\n    }\n\n    handleChange(e) {\n        this.setState({submitValue: e.target.value})\n    }\n\n    render() {\n        let modal = (\n            <div id=\"myModal\" className=\"modal\">\n                <div className=\"modal-content\">\n                    <span className=\"close\" onClick={this.handleSpanClick}>&times;</span>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            {this.props.type} Name:\n                            <input type=\"text\" value={this.state.submitValue} onChange={this.handleChange} />\n                        </label>\n                        <input className=\"submitButton\" type=\"submit\" value={this.props.submitName} />\n                    </form>\n                </div>\n            </div>\n        );\n        const modalRoot = document.getElementById('last');\n        return ReactDOM.createPortal(modal, modalRoot);\n    }\n}\n\n//A single button used to display the parent directory\nclass ParentFolderButton extends React.Component {\n    render() {\n        return (\n            <div className='menuButtonsCont'>\n            <button id=\"backButton\" onClick={() => this.props.onClick()}>\n                Go Back\n            </button>\n            </div>\n\n        );\n\n    }\n}\n\nReactDOM.render(<FileManager/>, document.getElementById('app'));\n"]},"metadata":{},"sourceType":"module"}