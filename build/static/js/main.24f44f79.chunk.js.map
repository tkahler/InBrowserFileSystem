{"version":3,"sources":["index.js"],"names":["data","ItemNode","path","type","children","Object","_home_tod_Documents_resumePojects_file_system_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","this","name","ItemTree","root","allItems","rootFolder","parent","substring","lastIndexOf","indexOf","push","newItem","_getAllChildNodes","console","log","childIndex","splice","newPath","id","ids","_this","map","localStorage","getItem","JSON","parse","loadTree","FileManager","props","_this2","_home_tod_Documents_resumePojects_file_system_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__","_home_tod_Documents_resumePojects_file_system_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__","call","state","getDirectoryChildren","concat","handleAddItem","bind","_home_tod_Documents_resumePojects_file_system_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","renderFolders","handleItemClick","handleParentClick","handleItemDelete","handleRename","addItem","setState","alert","parentPath","slice","deleteItem","newName","renameItem","_this3","setItem","stringify","items","sort","a","b","item","react__WEBPACK_IMPORTED_MODULE_6___default","createElement","Item","key","onClick","onDeleteClick","onRenameClick","_this4","AddItemButton","ParentFolderButton","React","Component","_this5","renaming","handleMenuRename","handleCloseModal","srcImage","_this6","react_contextmenu__WEBPACK_IMPORTED_MODULE_9__","className","src","alt","NameItemModal","closeModal","submitName","_this7","displayModal","_this8","submitValue","handleSpanClick","handleSubmit","handleChange","e","preventDefault","target","value","modal","onSubmit","onChange","modalRoot","document","getElementById","ReactDOM","createPortal","_this9","render"],"mappings":"wIAiGIA,6FAtFEC,EACF,SAAAA,EAAYC,EAAMC,EAAMC,GAAWC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAC/BM,KAAKC,KAAON,EACZK,KAAKJ,KAAOA,EACZI,KAAKH,SAAWA,GAKlBK,aACF,SAAAA,IAAeJ,OAAAC,EAAA,EAAAD,CAAAE,KAAAE,GACX,IAAIC,EAAO,IAAIT,EAAS,OAAO,SAAU,IACzCM,KAAKI,SAAW,CAACC,WAAeF,wDAG3BC,GACLJ,KAAKI,SAAWA,kCAGZT,EAAMC,GACV,IAAIU,EAASX,EAAKY,UAAU,EAAGZ,EAAKa,YAAY,MAC5CX,EAAWG,KAAKI,SAASE,EAAO,UAAUT,SAC9C,GAAGA,EAASY,QAAQd,EAAKC,KAAU,EAAG,CAClCC,EAASa,KAAKf,EAAKC,GAEnB,IAAIe,EAAU,IAAIjB,EAASC,EAAMC,EAAM,IAIvC,OAHAI,KAAKI,SAAST,EAAKC,GAAQe,EAGpBX,KAAKY,kBAAkBf,GAG9B,OAAO,kDAKMF,GACjB,OAAOK,KAAKY,kBAAkBZ,KAAKI,SAAST,EAAK,UAAUE,6CAIpDF,EAAMC,UAENI,KAAKI,SAAST,EAAKC,GAI1BiB,QAAQC,IAAInB,GACZ,IAAIW,EAASX,EAAKY,UAAU,EAAGZ,EAAKa,YAAY,MAC5CX,EAAWG,KAAKI,SAASE,EAAOV,GAAMC,SACtCkB,EAAalB,EAASY,QAAQd,EAAKC,GAEvC,OADAC,EAASmB,OAAOD,EAAY,GACrBf,KAAKY,kBAAkBf,sCAGvBF,EAAMsB,EAASrB,GACtB,IAAIU,EAASX,EAAKY,UAAU,EAAGZ,EAAKa,YAAY,MAC5CX,EAAWG,KAAKI,SAASE,EAAO,UAAUT,SAG9C,GAAGA,EAASY,QAAQQ,EAAQrB,KAAU,EAAG,CACrC,IAAImB,EAAalB,EAASY,QAAQd,EAAKC,GACvCC,EAASkB,GAAaE,EAAUrB,EAEhC,IAAIsB,EAAKD,EAAUrB,EAMnB,OAJAI,KAAKI,SAASc,GAAMlB,KAAKI,SAAST,EAAKC,GACvCI,KAAKI,SAASc,GAAIjB,KAAOgB,SAClBjB,KAAKI,SAAST,GAEdK,KAAKY,kBAAkBf,GAG9B,OAAO,+CAKGsB,GAAK,IAAAC,EAAApB,KACnB,OAAOmB,EAAIE,IAAI,SAAAH,GAAO,OAAOE,EAAKhB,SAASc,cAQnD,GAAqC,OAAjCI,aAAaC,QAAQ,QAErB9B,EAAO,IAAIS,MACR,CACHT,EAAO,IAAIS,EACX,IAAIE,EAAWoB,KAAKC,MAAMH,aAAaC,QAAQ,SAC/C9B,EAAKiC,SAAStB,OAMZuB,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA/B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACfE,EAAA/B,OAAAgC,EAAA,EAAAhC,CAAAE,KAAAF,OAAAiC,EAAA,EAAAjC,CAAA6B,GAAAK,KAAAhC,KAAM4B,KAEDK,MAAQ,CACTpC,SAAUJ,EAAKyC,qBAAqB,QAAQC,SAC5CxC,KAAM,QAIVkC,EAAKO,cAAgBP,EAAKO,cAAcC,KAAnBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAA+B,KACrBA,EAAKU,cAAgBV,EAAKU,cAAcF,KAAnBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAA+B,KACrBA,EAAKW,gBAAkBX,EAAKW,gBAAgBH,KAArBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAA+B,KACvBA,EAAKY,kBAAoBZ,EAAKY,kBAAkBJ,KAAvBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAA+B,KACzBA,EAAKa,iBAAmBb,EAAKa,iBAAiBL,KAAtBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAA+B,KACxBA,EAAKc,aAAed,EAAKc,aAAaN,KAAlBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAA+B,KAdLA,6EAkBL5B,EAAML,GAChB,IAAID,EAAOK,KAAKiC,MAAMtC,KAAO,IAAMM,EAC/BJ,EAAWJ,EAAKmD,QAAQjD,EAAMC,EAAM,IACpCC,EACAG,KAAK6C,SAAS,CACVhD,SAAUA,EAASsC,WAGvBW,MAAM,KAAOlD,EAAO,2EAKZD,EAAMC,GAClB,GAAY,WAATA,EAAmB,CAClBiB,QAAQC,IAAInB,GACZ,IAAIE,EAAWJ,EAAKyC,qBAAqBvC,GAAMwC,SAE/CnC,KAAK6C,SAAS,CACVhD,SAAUA,EACVF,KAAMA,iDASd,GAAwB,SAApBK,KAAKiC,MAAMtC,KAAiB,CAC5B,IAAIoD,EAAa/C,KAAKiC,MAAMtC,KAAKqD,QACjCD,EAAaA,EAAWxC,UAAU,EAAGwC,EAAWvC,YAAY,MAE5D,IAAIX,EAAWJ,EAAKyC,qBAAqBa,GAEzC/C,KAAK6C,SAAS,CACVhD,SAAUA,EAASsC,SACnBxC,KAAMoD,8CAQDpD,EAAMC,GACnB,IAAIC,EAAWJ,EAAKwD,WAAWtD,EAAMC,GACrCI,KAAK6C,SAAS,CAAChD,SAAUA,EAASsC,gDAIzBxC,EAAMuD,EAAStD,GACxB,IAAIqB,EAAUjB,KAAKiC,MAAMtC,KAAO,IAAMuD,EAClCrD,EAAWJ,EAAK0D,WAAWxD,EAAMsB,EAASrB,GAC3CC,EAAWG,KAAK6C,SAAS,CAAChD,SAAUA,EAASsC,WAE5CW,MAAM,KAAOlD,EAAO,0EAKZ,IAAAwD,EAAApD,KACZsB,aAAa+B,QAAQ,OAAO7B,KAAK8B,UAAU7D,EAAKW,WAChD,IAAImD,EAAQvD,KAAKiC,MAAMpC,SAASsC,SAEhC,OADAoB,EAAMC,KAAK,SAACC,EAAEC,GAAH,OAASD,EAAE7D,KAAO8D,EAAE9D,OACxB2D,EAAMlC,IAAI,SAACsC,GAAD,OAAUC,EAAAH,EAAAI,cAACC,EAAD,CAAMlE,KAAM+D,EAAK/D,KAAMmE,IAAKJ,EAAK1D,KAAO0D,EAAK/D,KAAMK,KAAM0D,EAAK1D,KACzC+D,QAAUZ,EAAKZ,gBACfyB,cAAgBb,EAAKV,iBAAkBwB,cAAed,EAAKT,kDAItG,IAAAwB,EAAAnE,KACL,OACI4D,EAAAH,EAAAI,cAAA,WACID,EAAAH,EAAAI,cAAA,WACID,EAAAH,EAAAI,cAACO,EAAD,CAAexE,KAAK,SAASoE,QAAShE,KAAKoC,gBAC3CwB,EAAAH,EAAAI,cAACO,EAAD,CAAexE,KAAK,OAAOoE,QAAShE,KAAKoC,gBACzCwB,EAAAH,EAAAI,cAACQ,EAAD,CAAoBL,QAAS,kBAAMG,EAAK1B,wBAG5CmB,EAAAH,EAAAI,cAAA,WACID,EAAAH,EAAAI,cAAA,UAAK7D,KAAKiC,MAAMtC,OAEpBiE,EAAAH,EAAAI,cAAA,WACK7D,KAAKuC,yBAxGA+B,IAAMC,WAiH1BT,cACF,SAAAA,EAAYlC,GAAO,IAAA4C,EAAA,OAAA1E,OAAAC,EAAA,EAAAD,CAAAE,KAAA8D,IACfU,EAAA1E,OAAAgC,EAAA,EAAAhC,CAAAE,KAAAF,OAAAiC,EAAA,EAAAjC,CAAAgE,GAAA9B,KAAAhC,KAAM4B,KACDK,MAAQ,CACTwC,UAAU,EACVxE,KAAMuE,EAAK5C,MAAM3B,KACjBL,KAAM4E,EAAK5C,MAAMhC,MAErB4E,EAAKE,iBAAmBF,EAAKE,iBAAiBrC,KAAtBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAA0E,KACxBA,EAAKG,iBAAmBH,EAAKG,iBAAiBtC,KAAtBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAA0E,KACxBA,EAAK7B,aAAe6B,EAAK7B,aAAaN,KAAlBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAA0E,KATLA,kFAefxE,KAAK6C,SAAS,CAAC4B,UAAU,+CAKzBzE,KAAK6C,SAAS,CAAC4B,UAAU,yCAIhBvB,GACTlD,KAAK4B,MAAMsC,cAAclE,KAAKiC,MAAMhC,KAAMiD,EAASlD,KAAKiC,MAAMrC,uCAGzD,IACDgF,EADCC,EAAA7E,KAQL,OALI4E,EADmB,WAApB5E,KAAK4B,MAAMhC,KACC,6EAEA,sDAIXgE,EAAAH,EAAAI,cAAA,WACID,EAAAH,EAAAI,cAACiB,EAAA,EAAD,CAAoB5D,GAAIlB,KAAKiC,MAAMhC,KAAOD,KAAKiC,MAAMrC,MACjDgE,EAAAH,EAAAI,cAAA,OAAKkB,UAAU,QAAQf,QAAS,kBAAMa,EAAKjD,MAAMoC,QAAQa,EAAK5C,MAAMhC,KAAM4E,EAAK5C,MAAMrC,QACjFgE,EAAAH,EAAAI,cAAA,SACAD,EAAAH,EAAAI,cAAA,OAAKmB,IAAKJ,EAAUK,IAAKjF,KAAKiC,MAAMrC,KAAO,UAC1CI,KAAK4B,MAAM3B,QAIpB2D,EAAAH,EAAAI,cAACiB,EAAA,EAAD,CAAa5D,GAAIlB,KAAKiC,MAAMhC,KAAOD,KAAKiC,MAAMrC,MAC1CgE,EAAAH,EAAAI,cAACiB,EAAA,EAAD,CAAUd,QAAShE,KAAK0E,kBAAxB,UAGAd,EAAAH,EAAAI,cAACiB,EAAA,EAAD,CAAUd,QAAS,kBAAMa,EAAKjD,MAAMqC,cAAcY,EAAK5C,MAAMhC,KAAM4E,EAAK5C,MAAMrC,QAA9E,WAKHI,KAAKiC,MAAMwC,SAAWb,EAAAH,EAAAI,cAACqB,EAAD,CAAelB,QAAUhE,KAAK2C,aACfwC,WAAcnF,KAAK2E,iBACnBS,WAAc,UAAYpF,KAAKiC,MAAMrC,OAAU,aA1DlF0E,IAAMC,WAkEnBH,cACF,SAAAA,EAAYxC,GAAO,IAAAyD,EAAA,OAAAvF,OAAAC,EAAA,EAAAD,CAAAE,KAAAoE,IACfiB,EAAAvF,OAAAgC,EAAA,EAAAhC,CAAAE,KAAAF,OAAAiC,EAAA,EAAAjC,CAAAsE,GAAApC,KAAAhC,KAAM4B,KACDK,MAAQ,CACTqD,cAAc,GAElBD,EAAKrB,QAAUqB,EAAKrB,QAAQ3B,KAAbvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAAuF,KACfA,EAAKV,iBAAmBU,EAAKV,iBAAiBtC,KAAtBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAAuF,KANTA,yEAWfrF,KAAK6C,SAAS,CAACyC,cAAc,+CAI7BtF,KAAK6C,SAAS,CAACyC,cAAc,qCAI7B,IAAI1F,EAAOI,KAAK4B,MAAMhC,KAEtB,OACIgE,EAAAH,EAAAI,cAAA,OAAKkB,UAAU,mBACXnB,EAAAH,EAAAI,cAAA,UAAQ3C,GAAG,kBAAkB8C,QAAShE,KAAKgE,SAA3C,OACSpE,GAERI,KAAKiC,MAAMqD,aAAe1B,EAAAH,EAAAI,cAACqB,EAAD,CAAetF,KAAMI,KAAK4B,MAAMhC,KAAMuF,WAAYnF,KAAK2E,iBACxCX,QAAShE,KAAK4B,MAAMoC,QAASoB,WAAa,OAASxF,IAAS,aA5B1F0E,IAAMC,WAsC5BW,cACF,SAAAA,EAAYtD,GAAO,IAAA2D,EAAA,OAAAzF,OAAAC,EAAA,EAAAD,CAAAE,KAAAkF,IACfK,EAAAzF,OAAAgC,EAAA,EAAAhC,CAAAE,KAAAF,OAAAiC,EAAA,EAAAjC,CAAAoF,GAAAlD,KAAAhC,KAAM4B,KACDK,MAAQ,CACTuD,YAAa,IAEjBD,EAAKE,gBAAkBF,EAAKE,gBAAgBpD,KAArBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAAyF,KACvBA,EAAKG,aAAeH,EAAKG,aAAarD,KAAlBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAAyF,KACpBA,EAAKI,aAAeJ,EAAKI,aAAatD,KAAlBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAAyF,KAPLA,iFAWfvF,KAAK4B,MAAMuD,kDAGFS,GACT5F,KAAKyF,kBACLzF,KAAK4B,MAAMoC,QAAQhE,KAAKiC,MAAMuD,YAAaxF,KAAK4B,MAAMhC,MACtDgG,EAAEC,sDAGOD,GACT5F,KAAK6C,SAAS,CAAC2C,YAAaI,EAAEE,OAAOC,yCAIrC,IAAIC,EACApC,EAAAH,EAAAI,cAAA,OAAK3C,GAAG,UAAU6D,UAAU,SACxBnB,EAAAH,EAAAI,cAAA,OAAKkB,UAAU,iBACXnB,EAAAH,EAAAI,cAAA,QAAMkB,UAAU,QAAQf,QAAShE,KAAKyF,iBAAtC,QACA7B,EAAAH,EAAAI,cAAA,QAAMoC,SAAUjG,KAAK0F,cACjB9B,EAAAH,EAAAI,cAAA,aACK7D,KAAK4B,MAAMhC,KADhB,SAEIgE,EAAAH,EAAAI,cAAA,SAAOjE,KAAK,OAAOmG,MAAO/F,KAAKiC,MAAMuD,YAAaU,SAAUlG,KAAK2F,gBAErE/B,EAAAH,EAAAI,cAAA,SAAOkB,UAAU,eAAenF,KAAK,SAASmG,MAAO/F,KAAK4B,MAAMwD,gBAK1Ee,EAAYC,SAASC,eAAe,QAC1C,OAAOC,IAASC,aAAaP,EAAOG,UAzChB7B,IAAMC,WA8C5BF,mLACO,IAAAmC,EAAAxG,KACL,OACI4D,EAAAH,EAAAI,cAAA,OAAKkB,UAAU,mBACfnB,EAAAH,EAAAI,cAAA,UAAQ3C,GAAG,aAAa8C,QAAS,kBAAMwC,EAAK5E,MAAMoC,YAAlD,mBAJqBM,IAAMC,WAcvC+B,IAASG,OAAO7C,EAAAH,EAAAI,cAAClC,EAAD,MAAgByE,SAASC,eAAe","file":"static/js/main.24f44f79.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/index.css';\n\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n\n\n//the item (folder and files) information of all items in file system is stored in a tree,\n// where data is always pointing to the node of the current directory\n\n\nclass ItemNode  {\n    constructor(path, type, children) {\n        this.name = path;\n        this.type = type;\n        this.children = children;\n    }\n\n}\n\nclass ItemTree {\n    constructor() {\n        let root = new ItemNode('root','Folder', []);\n        this.allItems = {'rootFolder' : root};\n    }\n\n    loadTree(allItems) {\n        this.allItems = allItems;\n    }\n\n    addItem(path, type) {\n        let parent = path.substring(0, path.lastIndexOf('/'));\n        let children = this.allItems[parent+'Folder'].children;\n        if(children.indexOf(path+type) <= -1) {\n            children.push(path+type);\n\n            let newItem = new ItemNode(path, type, []);\n            this.allItems[path+type] = newItem;\n\n\n            return this._getAllChildNodes(children);\n\n        } else {\n            return null;\n        }\n\n    }\n\n    getDirectoryChildren(path) {\n        return this._getAllChildNodes(this.allItems[path+'Folder'].children);\n    }\n\n\n    deleteItem(path, type) {\n        //remove from all items\n        delete this.allItems[path+type];\n        //--------------------------delete all decendents of file aswell\n\n        //remove from parents children\n        console.log(path);\n        let parent = path.substring(0, path.lastIndexOf('/'));\n        let children = this.allItems[parent+type].children;\n        let childIndex = children.indexOf(path+type);\n        children.splice(childIndex, 1);\n        return this._getAllChildNodes(children);\n    }\n\n    renameItem(path, newPath, type) {\n        let parent = path.substring(0, path.lastIndexOf('/'));\n        let children = this.allItems[parent+'Folder'].children;\n\n        //if not already in child\n        if(children.indexOf(newPath+type) <= -1) {\n            let childIndex = children.indexOf(path+type);\n            children[childIndex]= newPath + type;\n\n            let id = newPath + type;\n            //rename key\n            this.allItems[id] = this.allItems[path+type];\n            this.allItems[id].name = newPath;\n            delete this.allItems[path];\n\n            return this._getAllChildNodes(children);\n\n        } else {\n            return null;\n        }\n\n    }\n\n    _getAllChildNodes(ids) {\n        return ids.map(id => {return this.allItems[id]});\n    }\n\n}\n\n//localStorage.clear(); //uncomment to clear localstorage\nlet data;\n//if data not set make new root directory else load root directory\nif (localStorage.getItem('Data') === null) {\n    //item node of current directory\n    data = new ItemTree();\n} else {\n    data = new ItemTree();\n    let allItems = JSON.parse(localStorage.getItem(\"Data\"));\n    data.loadTree(allItems);\n}\n\n\n// Renders the add folder/file buttons, the back button, and dynamically renders\n// the current directory to be displayed\nclass FileManager extends React.Component {\n    //initialize current directory to root with no children\n    constructor(props) {\n        super(props);\n        //state always updated to reflect current directory to display\n        this.state = {\n            children: data.getDirectoryChildren('root').concat(),\n            path: 'root',\n\n        };\n\n        this.handleAddItem = this.handleAddItem.bind(this);\n        this.renderFolders = this.renderFolders.bind(this);\n        this.handleItemClick = this.handleItemClick.bind(this);\n        this.handleParentClick = this.handleParentClick.bind(this);\n        this.handleItemDelete = this.handleItemDelete.bind(this);\n        this.handleRename = this.handleRename.bind(this);\n    }\n\n    //add new item to data, update state to display new item\n    handleAddItem(name, type) {\n        let path = this.state.path + '/' + name;\n        let children = data.addItem(path, type, []);\n        if (children) {\n            this.setState({\n                children: children.concat()\n            });\n        } else {\n            alert(\"A \" + type + \" with this name already exists!\");\n        }\n    }\n\n    //if folder is clicked update state to display new directory\n    handleItemClick(path, type) {\n        if(type === 'Folder') {\n            console.log(path);\n            let children = data.getDirectoryChildren(path).concat();\n\n            this.setState({\n                children: children,\n                path: path,\n            });\n        } else {\n            //if file clicked type do stuff here\n        }\n    }\n\n    //if the back button is pressed, update state to display parent directory\n    handleParentClick() {\n        if (this.state.path !== 'root') {\n            let parentPath = this.state.path.slice();\n            parentPath = parentPath.substring(0, parentPath.lastIndexOf('/'));\n\n            let children = data.getDirectoryChildren(parentPath);\n\n            this.setState({\n                children: children.concat(),\n                path: parentPath,\n            });\n        }\n\n    }\n\n\n    //delete the passed item from data, update state to display deletion\n    handleItemDelete(path, type) {\n        let children = data.deleteItem(path, type);\n        this.setState({children: children.concat()});\n    }\n\n    //find file in data and rename it, update state\n    handleRename(path, newName, type) {\n        let newPath = this.state.path + '/' + newName;\n        let children = data.renameItem(path, newPath, type);\n        if(children) {this.setState({children: children.concat()});\n        } else {\n            alert(\"A \" + type + \" with this name already exists\");\n        }\n    }\n\n    //using the children current state render the file components\n    renderFolders() {\n        localStorage.setItem('Data',JSON.stringify(data.allItems));\n        let items = this.state.children.concat();\n        items.sort((a,b) => a.type < b.type);\n        return items.map((item) => <Item type={item.type} key={item.name + item.type} name={item.name}\n                                                        onClick ={this.handleItemClick}\n                                                        onDeleteClick ={this.handleItemDelete} onRenameClick={this.handleRename}/>);\n\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <AddItemButton type=\"Folder\" onClick={this.handleAddItem}/>\n                    <AddItemButton type=\"File\" onClick={this.handleAddItem}/>\n                    <ParentFolderButton onClick={() => this.handleParentClick()}/>\n                </div>\n\n                <div>\n                    <h3>{this.state.path}</h3>\n                </div>\n                <div>\n                    {this.renderFolders()}\n                </div>\n            </div>\n        );\n    }\n}\n\n\n//An item component displays a single clickable item (folder or file)\nclass Item extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            renaming: false,\n            name: this.props.name,\n            type: this.props.type,\n        };\n        this.handleMenuRename = this.handleMenuRename.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.handleRename = this.handleRename.bind(this);\n\n    }\n\n    //if file is right clicked allow the NameItemModal to be displayed\n    handleMenuRename() {\n        this.setState({renaming: true});\n    }\n\n    //if NameItemModal is closed, stop displaying it\n    handleCloseModal() {\n        this.setState({renaming: false});\n    }\n\n    //calls method in FileManager to change the state of children\n    handleRename(newName) {\n        this.props.onRenameClick(this.state.name, newName, this.state.type);\n    }\n\n    render() {\n        let srcImage;\n        if(this.props.type === 'Folder') {\n            srcImage = \"https://cdn4.iconfinder.com/data/icons/small-n-flat/24/folder-blue-128.png\";\n        } else {\n            srcImage = \"https://static.thenounproject.com/png/47347-200.png\";\n        }\n\n        return (\n            <div>\n                <ContextMenuTrigger id={this.state.name + this.state.type}>\n                    <div className='files' onClick={() => this.props.onClick(this.state.name, this.state.type)}>\n                        <p>\n                        <img src={srcImage} alt={this.state.type + \" Icon\"}/>\n                        {this.props.name}</p>\n                    </div>\n                </ContextMenuTrigger>\n\n                <ContextMenu id={this.state.name + this.state.type}>\n                    <MenuItem onClick={this.handleMenuRename}>\n                        Rename\n                    </MenuItem>\n                    <MenuItem onClick={() => this.props.onDeleteClick(this.state.name, this.state.type)}>\n                        Delete\n                    </MenuItem>\n                </ContextMenu>\n\n                {this.state.renaming ? <NameItemModal onClick= {this.handleRename}\n                                                      closeModal = {this.handleCloseModal}\n                                                      submitName = {\"Rename \" + this.state.type}/> : null}\n            </div>\n        );\n    }\n}\n\n\n//AddItemButton is a single button that is used to open the NameItemModal\nclass AddItemButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            displayModal: false\n        };\n        this.onClick = this.onClick.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n    }\n\n    //when add item button clicked name file modal is displayed\n    onClick() {\n        this.setState({displayModal: true});\n    }\n\n    handleCloseModal() {\n        this.setState({displayModal: false});\n    }\n\n    render() {\n        let type = this.props.type;\n\n        return (\n            <div className='menuButtonsCont'>\n                <button id=\"addFolderButton\" onClick={this.onClick}>\n                    Add {type}\n                </button>\n                {this.state.displayModal ? <NameItemModal type={this.props.type} closeModal={this.handleCloseModal}\n                                                          onClick={this.props.onClick} submitName ={\"Add \" + type}/>: null}\n            </div>\n        );\n\n    }\n}\n\n\n//NameItemModal allows user to enter a file name into a text box and submit\n//used for adding new items and renaming current ones\nclass NameItemModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            submitValue: \"\",\n        };\n        this.handleSpanClick = this.handleSpanClick.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleSpanClick() {\n        this.props.closeModal();\n    }\n\n    handleSubmit(e) {\n        this.handleSpanClick();\n        this.props.onClick(this.state.submitValue, this.props.type);\n        e.preventDefault();\n    }\n\n    handleChange(e) {\n        this.setState({submitValue: e.target.value})\n    }\n\n    render() {\n        let modal = (\n            <div id=\"myModal\" className=\"modal\">\n                <div className=\"modal-content\">\n                    <span className=\"close\" onClick={this.handleSpanClick}>&times;</span>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            {this.props.type} Name:\n                            <input type=\"text\" value={this.state.submitValue} onChange={this.handleChange} />\n                        </label>\n                        <input className=\"submitButton\" type=\"submit\" value={this.props.submitName} />\n                    </form>\n                </div>\n            </div>\n        );\n        const modalRoot = document.getElementById('last');\n        return ReactDOM.createPortal(modal, modalRoot);\n    }\n}\n\n//A single button used to display the parent directory\nclass ParentFolderButton extends React.Component {\n    render() {\n        return (\n            <div className='menuButtonsCont'>\n            <button id=\"backButton\" onClick={() => this.props.onClick()}>\n                Go Back\n            </button>\n            </div>\n\n        );\n\n    }\n}\n\nReactDOM.render(<FileManager/>, document.getElementById('app'));\n"],"sourceRoot":""}